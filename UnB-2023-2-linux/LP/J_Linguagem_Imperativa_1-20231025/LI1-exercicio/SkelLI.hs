module SkelLI where

-- Haskell module generated by the BNF converter

import AbsLI
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog stm -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SAss ident exp -> failure x
  SBlock stms -> failure x
  SWhile exp stm -> failure x
  SFor stm1 exp stm2 stm3 -> failure x
  SIf exp stm -> failure x
  SIfE exp stm1 stm2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EInt integer -> failure x
  EVar ident -> failure x

