-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from ParLI.y
-----------------------------------------------------------------------------

state 57 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pStm -> Stm                                 (1)
	%start_pListStm -> ListStm                         (2)
	%start_pExp1 -> Exp1                               (3)
	%start_pExp2 -> Exp2                               (4)
	%start_pExp3 -> Exp3                               (5)
	%start_pExp -> Exp                                 (6)
	Ident -> L_ident                                   (7)
	Integer -> L_integ                                 (8)
	Program -> Stm                                     (9)
	Stm -> Ident '=' Exp ';'                           (10)
	Stm -> '{' ListStm '}'                             (11)
	Stm -> 'while' '(' Exp ')' Stm                     (12)
	Stm -> 'for' '(' Stm Exp ';' Stm ')' Stm           (13)
	Stm -> 'if' '(' Exp ')' 'then' Stm                 (14)
	Stm -> 'if' '(' Exp ')' 'then' Stm 'else' Stm      (15)
	ListStm ->                                         (16)
	ListStm -> ListStm Stm                             (17)
	Exp1 -> Exp1 '+' Exp2                              (18)
	Exp1 -> Exp1 '-' Exp2                              (19)
	Exp1 -> Exp2                                       (20)
	Exp2 -> Exp2 '*' Exp3                              (21)
	Exp2 -> Exp2 '/' Exp3                              (22)
	Exp2 -> Exp3                                       (23)
	Exp3 -> Integer                                    (24)
	Exp3 -> Ident                                      (25)
	Exp3 -> '(' Exp ')'                                (26)
	Exp -> Exp1                                        (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'-'            { PT _ (TS _ 5) }
	'/'            { PT _ (TS _ 6) }
	';'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'else'         { PT _ (TS _ 9) }
	'for'          { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'then'         { PT _ (TS _ 12) }
	'while'        { PT _ (TS _ 13) }
	'{'            { PT _ (TS _ 14) }
	'}'            { PT _ (TS _ 15) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pStm     rule  1
	%start_pListStm rule  2
	%start_pExp1    rule  3
	%start_pExp2    rule  4
	%start_pExp3    rule  5
	%start_pExp     rule  6
	Ident           rule  7
	Integer         rule  8
	Program         rule  9
	Stm             rules 10, 11, 12, 13, 14, 15
	ListStm         rules 16, 17
	Exp1            rules 18, 19, 20
	Exp2            rules 21, 22, 23
	Exp3            rules 24, 25, 26
	Exp             rule  27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Program        goto state 27
	Stm            goto state 28

State 1


	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 22

State 2


	'for'          reduce using rule 16
	'if'           reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	L_ident        reduce using rule 16
	%eof           reduce using rule 16

	ListStm        goto state 20

State 3


	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 19
	Exp2           goto state 12
	Exp3           goto state 13

State 4


	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 18
	Exp3           goto state 13

State 5


	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 17

State 6


	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 14

State 7


	L_ident        shift, and enter state 8


State 8

	Ident -> L_ident .                                  (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'/'            reduce using rule 7
	';'            reduce using rule 7
	'='            reduce using rule 7
	%eof           reduce using rule 7


State 9

	Exp3 -> Ident .                                     (rule 25)

	')'            reduce using rule 25
	'*'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'/'            reduce using rule 25
	';'            reduce using rule 25
	%eof           reduce using rule 25


State 10

	Exp3 -> Integer .                                   (rule 24)

	')'            reduce using rule 24
	'*'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'/'            reduce using rule 24
	';'            reduce using rule 24
	%eof           reduce using rule 24


State 11

	Exp1 -> Exp1 . '+' Exp2                             (rule 18)
	Exp1 -> Exp1 . '-' Exp2                             (rule 19)
	Exp -> Exp1 .                                       (rule 27)

	')'            reduce using rule 27
	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	';'            reduce using rule 27
	%eof           reduce using rule 27


State 12

	Exp1 -> Exp2 .                                      (rule 20)
	Exp2 -> Exp2 . '*' Exp3                             (rule 21)
	Exp2 -> Exp2 . '/' Exp3                             (rule 22)

	')'            reduce using rule 20
	'*'            shift, and enter state 37
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'/'            shift, and enter state 38
	';'            reduce using rule 20
	%eof           reduce using rule 20


State 13

	Exp2 -> Exp3 .                                      (rule 23)

	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	%eof           reduce using rule 23


State 14

	%start_pExp -> Exp .                                (rule 6)

	%eof           accept


State 15

	Exp3 -> '(' . Exp ')'                               (rule 26)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 39

State 16

	Integer -> L_integ .                                (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'/'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 17

	%start_pExp3 -> Exp3 .                              (rule 5)

	%eof           accept


State 18

	%start_pExp2 -> Exp2 .                              (rule 4)
	Exp2 -> Exp2 . '*' Exp3                             (rule 21)
	Exp2 -> Exp2 . '/' Exp3                             (rule 22)

	'*'            shift, and enter state 37
	'/'            shift, and enter state 38
	%eof           accept


State 19

	%start_pExp1 -> Exp1 .                              (rule 3)
	Exp1 -> Exp1 . '+' Exp2                             (rule 18)
	Exp1 -> Exp1 . '-' Exp2                             (rule 19)

	'+'            shift, and enter state 35
	'-'            shift, and enter state 36
	%eof           accept


State 20

	%start_pListStm -> ListStm .                        (rule 2)
	ListStm -> ListStm . Stm                            (rule 17)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8
	%eof           accept

	Ident          goto state 21
	Stm            goto state 34

State 21

	Stm -> Ident . '=' Exp ';'                          (rule 10)

	'='            shift, and enter state 33


State 22

	%start_pStm -> Stm .                                (rule 1)

	%eof           accept


State 23

	Stm -> 'for' . '(' Stm Exp ';' Stm ')' Stm          (rule 13)

	'('            shift, and enter state 32


State 24

	Stm -> 'if' . '(' Exp ')' 'then' Stm                (rule 14)
	Stm -> 'if' . '(' Exp ')' 'then' Stm 'else' Stm     (rule 15)

	'('            shift, and enter state 31


State 25

	Stm -> 'while' . '(' Exp ')' Stm                    (rule 12)

	'('            shift, and enter state 30


State 26

	Stm -> '{' . ListStm '}'                            (rule 11)

	'for'          reduce using rule 16
	'if'           reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	L_ident        reduce using rule 16

	ListStm        goto state 29

State 27

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 28

	Program -> Stm .                                    (rule 9)

	%eof           reduce using rule 9


State 29

	Stm -> '{' ListStm . '}'                            (rule 11)
	ListStm -> ListStm . Stm                            (rule 17)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	'}'            shift, and enter state 49
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 34

State 30

	Stm -> 'while' '(' . Exp ')' Stm                    (rule 12)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 48

State 31

	Stm -> 'if' '(' . Exp ')' 'then' Stm                (rule 14)
	Stm -> 'if' '(' . Exp ')' 'then' Stm 'else' Stm     (rule 15)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 47

State 32

	Stm -> 'for' '(' . Stm Exp ';' Stm ')' Stm          (rule 13)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 46

State 33

	Stm -> Ident '=' . Exp ';'                          (rule 10)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 45

State 34

	ListStm -> ListStm Stm .                            (rule 17)

	'for'          reduce using rule 17
	'if'           reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_ident        reduce using rule 17
	%eof           reduce using rule 17


State 35

	Exp1 -> Exp1 '+' . Exp2                             (rule 18)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 44
	Exp3           goto state 13

State 36

	Exp1 -> Exp1 '-' . Exp2                             (rule 19)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp2           goto state 43
	Exp3           goto state 13

State 37

	Exp2 -> Exp2 '*' . Exp3                             (rule 21)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 42

State 38

	Exp2 -> Exp2 '/' . Exp3                             (rule 22)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp3           goto state 41

State 39

	Exp3 -> '(' Exp . ')'                               (rule 26)

	')'            shift, and enter state 40


State 40

	Exp3 -> '(' Exp ')' .                               (rule 26)

	')'            reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	';'            reduce using rule 26
	%eof           reduce using rule 26


State 41

	Exp2 -> Exp2 '/' Exp3 .                             (rule 22)

	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'/'            reduce using rule 22
	';'            reduce using rule 22
	%eof           reduce using rule 22


State 42

	Exp2 -> Exp2 '*' Exp3 .                             (rule 21)

	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'/'            reduce using rule 21
	';'            reduce using rule 21
	%eof           reduce using rule 21


State 43

	Exp1 -> Exp1 '-' Exp2 .                             (rule 19)
	Exp2 -> Exp2 . '*' Exp3                             (rule 21)
	Exp2 -> Exp2 . '/' Exp3                             (rule 22)

	')'            reduce using rule 19
	'*'            shift, and enter state 37
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'/'            shift, and enter state 38
	';'            reduce using rule 19
	%eof           reduce using rule 19


State 44

	Exp1 -> Exp1 '+' Exp2 .                             (rule 18)
	Exp2 -> Exp2 . '*' Exp3                             (rule 21)
	Exp2 -> Exp2 . '/' Exp3                             (rule 22)

	')'            reduce using rule 18
	'*'            shift, and enter state 37
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'/'            shift, and enter state 38
	';'            reduce using rule 18
	%eof           reduce using rule 18


State 45

	Stm -> Ident '=' Exp . ';'                          (rule 10)

	';'            shift, and enter state 53


State 46

	Stm -> 'for' '(' Stm . Exp ';' Stm ')' Stm          (rule 13)

	'('            shift, and enter state 15
	L_ident        shift, and enter state 8
	L_integ        shift, and enter state 16

	Ident          goto state 9
	Integer        goto state 10
	Exp1           goto state 11
	Exp2           goto state 12
	Exp3           goto state 13
	Exp            goto state 52

State 47

	Stm -> 'if' '(' Exp . ')' 'then' Stm                (rule 14)
	Stm -> 'if' '(' Exp . ')' 'then' Stm 'else' Stm     (rule 15)

	')'            shift, and enter state 51


State 48

	Stm -> 'while' '(' Exp . ')' Stm                    (rule 12)

	')'            shift, and enter state 50


State 49

	Stm -> '{' ListStm '}' .                            (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'else'         reduce using rule 11
	'for'          reduce using rule 11
	'if'           reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	L_ident        reduce using rule 11
	L_integ        reduce using rule 11
	%eof           reduce using rule 11


State 50

	Stm -> 'while' '(' Exp ')' . Stm                    (rule 12)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 56

State 51

	Stm -> 'if' '(' Exp ')' . 'then' Stm                (rule 14)
	Stm -> 'if' '(' Exp ')' . 'then' Stm 'else' Stm     (rule 15)

	'then'         shift, and enter state 55


State 52

	Stm -> 'for' '(' Stm Exp . ';' Stm ')' Stm          (rule 13)

	';'            shift, and enter state 54


State 53

	Stm -> Ident '=' Exp ';' .                          (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'else'         reduce using rule 10
	'for'          reduce using rule 10
	'if'           reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	L_ident        reduce using rule 10
	L_integ        reduce using rule 10
	%eof           reduce using rule 10


State 54

	Stm -> 'for' '(' Stm Exp ';' . Stm ')' Stm          (rule 13)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 58

State 55

	Stm -> 'if' '(' Exp ')' 'then' . Stm                (rule 14)
	Stm -> 'if' '(' Exp ')' 'then' . Stm 'else' Stm     (rule 15)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 57

State 56

	Stm -> 'while' '(' Exp ')' Stm .                    (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'else'         reduce using rule 12
	'for'          reduce using rule 12
	'if'           reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_ident        reduce using rule 12
	L_integ        reduce using rule 12
	%eof           reduce using rule 12


State 57

	Stm -> 'if' '(' Exp ')' 'then' Stm .                (rule 14)
	Stm -> 'if' '(' Exp ')' 'then' Stm . 'else' Stm     (rule 15)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'else'         shift, and enter state 60
			(reduce using rule 14)

	'for'          reduce using rule 14
	'if'           reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	L_ident        reduce using rule 14
	L_integ        reduce using rule 14
	%eof           reduce using rule 14


State 58

	Stm -> 'for' '(' Stm Exp ';' Stm . ')' Stm          (rule 13)

	')'            shift, and enter state 59


State 59

	Stm -> 'for' '(' Stm Exp ';' Stm ')' . Stm          (rule 13)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 62

State 60

	Stm -> 'if' '(' Exp ')' 'then' Stm 'else' . Stm     (rule 15)

	'for'          shift, and enter state 23
	'if'           shift, and enter state 24
	'while'        shift, and enter state 25
	'{'            shift, and enter state 26
	L_ident        shift, and enter state 8

	Ident          goto state 21
	Stm            goto state 61

State 61

	Stm -> 'if' '(' Exp ')' 'then' Stm 'else' Stm .     (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'else'         reduce using rule 15
	'for'          reduce using rule 15
	'if'           reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	L_ident        reduce using rule 15
	L_integ        reduce using rule 15
	%eof           reduce using rule 15


State 62

	Stm -> 'for' '(' Stm Exp ';' Stm ')' Stm .          (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'else'         reduce using rule 13
	'for'          reduce using rule 13
	'if'           reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_ident        reduce using rule 13
	L_integ        reduce using rule 13
	%eof           reduce using rule 13


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 17
Number of non-terminals: 16
Number of states: 63
