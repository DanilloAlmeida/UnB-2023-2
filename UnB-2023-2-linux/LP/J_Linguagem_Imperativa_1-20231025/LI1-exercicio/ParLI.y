-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLI where
import AbsLI
import LexLI
import ErrM

}

%name pProgram Program
%name pStm Stm
%name pListStm ListStm
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  '/' { PT _ (TS _ 6) }
  ';' { PT _ (TS _ 7) }
  '=' { PT _ (TS _ 8) }
  'else' { PT _ (TS _ 9) }
  'for' { PT _ (TS _ 10) }
  'if' { PT _ (TS _ 11) }
  'then' { PT _ (TS _ 12) }
  'while' { PT _ (TS _ 13) }
  '{' { PT _ (TS _ 14) }
  '}' { PT _ (TS _ 15) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : Stm { AbsLI.Prog $1 }
Stm :: { Stm }
Stm : Ident '=' Exp ';' { AbsLI.SAss $1 $3 }
    | '{' ListStm '}' { AbsLI.SBlock (reverse $2) }
    | 'while' '(' Exp ')' Stm { AbsLI.SWhile $3 $5 }
    | 'for' '(' Stm Exp ';' Stm ')' Stm { AbsLI.SFor $3 $4 $6 $8 }
    | 'if' '(' Exp ')' 'then' Stm { AbsLI.SIf $3 $6 }
    | 'if' '(' Exp ')' 'then' Stm 'else' Stm { AbsLI.SIfE $3 $6 $8 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp2 { AbsLI.EAdd $1 $3 }
     | Exp1 '-' Exp2 { AbsLI.ESub $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '*' Exp3 { AbsLI.EMul $1 $3 }
     | Exp2 '/' Exp3 { AbsLI.EDiv $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Integer { AbsLI.EInt $1 }
     | Ident { AbsLI.EVar $1 }
     | '(' Exp ')' { $2 }
Exp :: { Exp }
Exp : Exp1 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

